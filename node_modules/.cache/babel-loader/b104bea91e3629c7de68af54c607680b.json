{"ast":null,"code":"'use strict';\n\nmodule.exports = function () {\n  var _this = this,\n      colorDiff,\n      colorPosDiff,\n      nextColors,\n      nextColorsPos;\n\n  if (!this.channels[this.activeState]) this.channels[this.activeState] = []; // If the actual channel exist, reassign properties and exit\n  // (each channel is saved to prevent recomputing it each time)\n\n  if (this.channels[this.activeState][this.channelsIndex] !== undefined) {\n    this.activeColors = this.channels[this.activeState][this.channelsIndex].colors;\n    this.activeColorsDiff = this.channels[this.activeState][this.channelsIndex].colorsDiff;\n    this.activeColorsPos = this.channels[this.activeState][this.channelsIndex].colorsPos;\n    this.activeColorsPosDiff = this.channels[this.activeState][this.channelsIndex].colorsPosDiff;\n    return;\n  } // Set blank properties\n\n\n  this.channels[this.activeState].push([{}]);\n  this.channels[this.activeState][this.channelsIndex].colors = [];\n  this.channels[this.activeState][this.channelsIndex].colorsDiff = [];\n  this.channels[this.activeState][this.channelsIndex].colorsPos = [];\n  this.channels[this.activeState][this.channelsIndex].colorsPosDiff = [];\n  this.activeColors = [];\n  this.activeColorsDiff = [];\n  this.activeColorsPos = [];\n  this.activeColorsPosDiff = []; // Go on each gradient of the current state\n\n  this.states[this.activeState].gradients[this.channelsIndex].forEach(function (color, i) {\n    // Push the hex color converted to rgba on the channel and the active color properties\n    var colorPos = _this.getColorPos(color, i);\n\n    var color = _this.getColor(color);\n\n    var rgbaColor = _this.convertColorToRgba(color);\n\n    var activeChannel = _this.channels[_this.activeState];\n\n    activeChannel[_this.channelsIndex].colors.push(rgbaColor);\n\n    _this.activeColors.push(rgbaColor);\n\n    activeChannel[_this.channelsIndex].colorsPos.push(colorPos);\n\n    _this.activeColorsPos.push(colorPos); // If it's the first channel to be set, set the currentColors\n\n\n    if (!_this.isCurrentColorsSet) {\n      _this.currentColors.push(_this.convertColorToRgba(color));\n\n      _this.currentColorsPos.push(colorPos);\n    } // If it's the last gradient, compute the color diff between the last gradient and the first one,\n    // else between the penultimate one and the last one\n\n\n    if (_this.channelsIndex === _this.states[_this.activeState].gradients.length - 1) {\n      colorDiff = _this.getColorDiff(activeChannel[_this.channelsIndex].colors[i], activeChannel[0].colors[i]);\n      colorPosDiff = _this.getColorPosDiff(activeChannel[_this.channelsIndex].colorsPos[i], activeChannel[0].colorsPos[i]);\n    } else {\n      nextColors = _this.convertColorToRgba(_this.getColor(_this.states[_this.activeState].gradients[_this.channelsIndex + 1][i]));\n      nextColorsPos = _this.getColorPos(_this.states[_this.activeState].gradients[_this.channelsIndex + 1][i], i);\n      colorDiff = _this.getColorDiff(activeChannel[_this.channelsIndex].colors[i], nextColors);\n      colorPosDiff = _this.getColorPosDiff(activeChannel[_this.channelsIndex].colorsPos[i], nextColorsPos);\n    }\n\n    activeChannel[_this.channelsIndex].colorsDiff.push(colorDiff);\n\n    _this.activeColorsDiff.push(colorDiff);\n\n    activeChannel[_this.channelsIndex].colorsPosDiff.push(colorPosDiff);\n\n    _this.activeColorsPosDiff.push(colorPosDiff);\n  });\n  this.activetransitionSpeed = this.states[this.activeState].transitionSpeed || 5000;\n  this.isCurrentColorsSet = true;\n};","map":{"version":3,"sources":["/Users/sylv/Desktop/coding/portfolio-site/node_modules/granim/lib/setColors.js"],"names":["module","exports","_this","colorDiff","colorPosDiff","nextColors","nextColorsPos","channels","activeState","channelsIndex","undefined","activeColors","colors","activeColorsDiff","colorsDiff","activeColorsPos","colorsPos","activeColorsPosDiff","colorsPosDiff","push","states","gradients","forEach","color","i","colorPos","getColorPos","getColor","rgbaColor","convertColorToRgba","activeChannel","isCurrentColorsSet","currentColors","currentColorsPos","length","getColorDiff","getColorPosDiff","activetransitionSpeed","transitionSpeed"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nmodule.exports = function() {\r\n\tvar _this = this, colorDiff, colorPosDiff, nextColors, nextColorsPos;\r\n\r\n\tif (!this.channels[this.activeState]) this.channels[this.activeState] = [];\r\n\r\n\t// If the actual channel exist, reassign properties and exit\r\n\t// (each channel is saved to prevent recomputing it each time)\r\n\tif (this.channels[this.activeState][this.channelsIndex] !== undefined) {\r\n\t\tthis.activeColors = this.channels[this.activeState][this.channelsIndex].colors;\r\n\t\tthis.activeColorsDiff = this.channels[this.activeState][this.channelsIndex].colorsDiff;\r\n\t\tthis.activeColorsPos = this.channels[this.activeState][this.channelsIndex].colorsPos;\r\n\t\tthis.activeColorsPosDiff = this.channels[this.activeState][this.channelsIndex].colorsPosDiff;\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Set blank properties\r\n\tthis.channels[this.activeState].push([{}]);\r\n\tthis.channels[this.activeState][this.channelsIndex].colors = [];\r\n\tthis.channels[this.activeState][this.channelsIndex].colorsDiff = [];\r\n\tthis.channels[this.activeState][this.channelsIndex].colorsPos = [];\r\n\tthis.channels[this.activeState][this.channelsIndex].colorsPosDiff = [];\r\n\tthis.activeColors = [];\r\n\tthis.activeColorsDiff = [];\r\n\tthis.activeColorsPos = [];\r\n\tthis.activeColorsPosDiff = [];\r\n\r\n\t// Go on each gradient of the current state\r\n\tthis.states[this.activeState].gradients[this.channelsIndex].forEach(function(color, i) {\r\n\t\t// Push the hex color converted to rgba on the channel and the active color properties\r\n\t\tvar colorPos = _this.getColorPos(color, i);\r\n\t\tvar color = _this.getColor(color);\r\n\t\tvar rgbaColor = _this.convertColorToRgba(color);\r\n\t\tvar activeChannel = _this.channels[_this.activeState];\r\n\r\n\t\tactiveChannel[_this.channelsIndex].colors.push(rgbaColor);\r\n\t\t_this.activeColors.push(rgbaColor);\r\n\t\tactiveChannel[_this.channelsIndex].colorsPos.push(colorPos);\r\n\t\t_this.activeColorsPos.push(colorPos);\r\n\r\n\t\t// If it's the first channel to be set, set the currentColors\r\n\t\tif (!_this.isCurrentColorsSet) {\r\n\t\t\t_this.currentColors.push(_this.convertColorToRgba(color));\r\n\t\t\t_this.currentColorsPos.push(colorPos);\r\n\t\t}\r\n\r\n\t\t// If it's the last gradient, compute the color diff between the last gradient and the first one,\r\n\t\t// else between the penultimate one and the last one\r\n\t\tif (_this.channelsIndex === _this.states[_this.activeState].gradients.length - 1) {\r\n\t\t\tcolorDiff = _this.getColorDiff(\r\n\t\t\t\tactiveChannel[_this.channelsIndex].colors[i],\r\n\t\t\t\tactiveChannel[0].colors[i]\r\n\t\t\t);\r\n\t\t\tcolorPosDiff = _this.getColorPosDiff(\r\n\t\t\t\tactiveChannel[_this.channelsIndex].colorsPos[i],\r\n\t\t\t\tactiveChannel[0].colorsPos[i]\r\n\t\t\t);\r\n\r\n\t\t} else {\r\n\t\t\tnextColors = _this.convertColorToRgba(_this.getColor(_this.states[_this.activeState].gradients[_this.channelsIndex + 1][i]));\r\n\t\t\tnextColorsPos = _this.getColorPos(_this.states[_this.activeState].gradients[_this.channelsIndex + 1][i], i);\r\n\t\t\tcolorDiff = _this.getColorDiff(activeChannel[_this.channelsIndex].colors[i], nextColors);\r\n\t\t\tcolorPosDiff = _this.getColorPosDiff(activeChannel[_this.channelsIndex].colorsPos[i], nextColorsPos);\r\n\t\t}\r\n\r\n\t\tactiveChannel[_this.channelsIndex].colorsDiff.push(colorDiff);\r\n\t\t_this.activeColorsDiff.push(colorDiff);\r\n\t\tactiveChannel[_this.channelsIndex].colorsPosDiff.push(colorPosDiff);\r\n\t\t_this.activeColorsPosDiff.push(colorPosDiff);\r\n\t});\r\n\r\n\tthis.activetransitionSpeed = this.states[this.activeState].transitionSpeed || 5000;\r\n\tthis.isCurrentColorsSet = true;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}