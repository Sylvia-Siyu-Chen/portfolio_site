{"ast":null,"code":"'use strict';\n\nmodule.exports = function (newState) {\n  var _this = this; // Prevent transitioning to the same state\n\n\n  if (this.activeState === newState) {\n    return;\n  } // Setting the good properties for the transition\n\n\n  if (!this.isPaused) {\n    this.isPaused = true;\n    this.pause();\n  }\n\n  this.channelsIndex = -1;\n  this.activetransitionSpeed = this.stateTransitionSpeed;\n  this.activeColorsDiff = [];\n  this.activeColorsPosDiff = [];\n  this.activeColors = this.getCurrentColors();\n  this.activeColorsPos = this.getCurrentColorsPos();\n  this.progress = 0;\n  this.previousTimeStamp = null;\n  this.isChangingState = true; // Compute the gradient color and pos diff between the last frame gradient\n  // and the first one of the new state\n\n  this.states[newState].gradients[0].forEach(function (gradientColor, i, arr) {\n    var nextColors = _this.convertColorToRgba(_this.getColor(gradientColor));\n\n    var nextColorsPos = _this.getColorPos(gradientColor, i);\n\n    var colorDiff = _this.getColorDiff(_this.activeColors[i], nextColors);\n\n    var colorPosDiff = _this.getColorPosDiff(_this.activeColorsPos[i], nextColorsPos);\n\n    _this.activeColorsDiff.push(colorDiff);\n\n    _this.activeColorsPosDiff.push(colorPosDiff);\n  }); // Start the animation\n\n  this.activeState = newState;\n  this.play();\n};","map":{"version":3,"sources":["/Users/sylv/Desktop/coding/portfolio-site/node_modules/granim/lib/changeState.js"],"names":["module","exports","newState","_this","activeState","isPaused","pause","channelsIndex","activetransitionSpeed","stateTransitionSpeed","activeColorsDiff","activeColorsPosDiff","activeColors","getCurrentColors","activeColorsPos","getCurrentColorsPos","progress","previousTimeStamp","isChangingState","states","gradients","forEach","gradientColor","i","arr","nextColors","convertColorToRgba","getColor","nextColorsPos","getColorPos","colorDiff","getColorDiff","colorPosDiff","getColorPosDiff","push","play"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAASC,QAAT,EAAmB;AACnC,MAAIC,KAAK,GAAG,IAAZ,CADmC,CAGnC;;;AACA,MAAI,KAAKC,WAAL,KAAqBF,QAAzB,EAAmC;AAClC;AACA,GANkC,CAQnC;;;AACA,MAAI,CAAC,KAAKG,QAAV,EAAoB;AACnB,SAAKA,QAAL,GAAgB,IAAhB;AACA,SAAKC,KAAL;AACA;;AAED,OAAKC,aAAL,GAAqB,CAAC,CAAtB;AACA,OAAKC,qBAAL,GAA6B,KAAKC,oBAAlC;AACA,OAAKC,gBAAL,GAAwB,EAAxB;AACA,OAAKC,mBAAL,GAA2B,EAA3B;AACA,OAAKC,YAAL,GAAoB,KAAKC,gBAAL,EAApB;AACA,OAAKC,eAAL,GAAuB,KAAKC,mBAAL,EAAvB;AACA,OAAKC,QAAL,GAAgB,CAAhB;AACA,OAAKC,iBAAL,GAAyB,IAAzB;AACA,OAAKC,eAAL,GAAuB,IAAvB,CAtBmC,CAwBnC;AACA;;AACA,OAAKC,MAAL,CAAYjB,QAAZ,EAAsBkB,SAAtB,CAAgC,CAAhC,EAAmCC,OAAnC,CAA2C,UAASC,aAAT,EAAwBC,CAAxB,EAA2BC,GAA3B,EAAgC;AAC1E,QAAIC,UAAU,GAAGtB,KAAK,CAACuB,kBAAN,CAAyBvB,KAAK,CAACwB,QAAN,CAAeL,aAAf,CAAzB,CAAjB;;AACA,QAAIM,aAAa,GAAGzB,KAAK,CAAC0B,WAAN,CAAkBP,aAAlB,EAAiCC,CAAjC,CAApB;;AACA,QAAIO,SAAS,GAAG3B,KAAK,CAAC4B,YAAN,CAAmB5B,KAAK,CAACS,YAAN,CAAmBW,CAAnB,CAAnB,EAA0CE,UAA1C,CAAhB;;AACA,QAAIO,YAAY,GAAG7B,KAAK,CAAC8B,eAAN,CAAsB9B,KAAK,CAACW,eAAN,CAAsBS,CAAtB,CAAtB,EAAgDK,aAAhD,CAAnB;;AACAzB,IAAAA,KAAK,CAACO,gBAAN,CAAuBwB,IAAvB,CAA4BJ,SAA5B;;AACA3B,IAAAA,KAAK,CAACQ,mBAAN,CAA0BuB,IAA1B,CAA+BF,YAA/B;AACA,GAPD,EA1BmC,CAmCnC;;AACA,OAAK5B,WAAL,GAAmBF,QAAnB;AACA,OAAKiC,IAAL;AACA,CAtCD","sourcesContent":["'use strict';\r\n\r\nmodule.exports = function(newState) {\r\n\tvar _this = this;\r\n\r\n\t// Prevent transitioning to the same state\r\n\tif (this.activeState === newState) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Setting the good properties for the transition\r\n\tif (!this.isPaused) {\r\n\t\tthis.isPaused = true;\r\n\t\tthis.pause();\r\n\t}\r\n\r\n\tthis.channelsIndex = -1;\r\n\tthis.activetransitionSpeed = this.stateTransitionSpeed;\r\n\tthis.activeColorsDiff = [];\r\n\tthis.activeColorsPosDiff = [];\r\n\tthis.activeColors = this.getCurrentColors();\r\n\tthis.activeColorsPos = this.getCurrentColorsPos();\r\n\tthis.progress = 0;\r\n\tthis.previousTimeStamp = null;\r\n\tthis.isChangingState = true;\r\n\r\n\t// Compute the gradient color and pos diff between the last frame gradient\r\n\t// and the first one of the new state\r\n\tthis.states[newState].gradients[0].forEach(function(gradientColor, i, arr) {\r\n\t\tvar nextColors = _this.convertColorToRgba(_this.getColor(gradientColor));\r\n\t\tvar nextColorsPos = _this.getColorPos(gradientColor, i);\r\n\t\tvar colorDiff = _this.getColorDiff(_this.activeColors[i], nextColors);\r\n\t\tvar colorPosDiff = _this.getColorPosDiff(_this.activeColorsPos[i], nextColorsPos);\r\n\t\t_this.activeColorsDiff.push(colorDiff);\r\n\t\t_this.activeColorsPosDiff.push(colorPosDiff);\r\n\t});\r\n\r\n\t// Start the animation\r\n\tthis.activeState = newState;\r\n\tthis.play();\r\n};\r\n"]},"metadata":{},"sourceType":"script"}